/* core/static/css/style.css */
:root {
    --primary: #4F46E5;
    --primary-dark: #4338CA;
    --secondary: #0EA5E9;
    --success: #10B981;
    --warning: #F59E0B;
    --danger: #EF4444;
    --dark: #111827;
    --gray-50: #F9FAFB;
    --gray-100: #F3F4F6;
    --gray-200: #E5E7EB;
    --gray-300: #D1D5DB;
    --gray-400: #9CA3AF;
    --gray-500: #6B7280;
    --gray-600: #4B5563;
    --gray-700: #374151;
    --gray-800: #1F2937;
    --gray-900: #111827;
    }
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Inter', -apple-system, 
   BlinkMacSystemFont, sans-serif;
    }
    body {
    background-color: var(--gray-50);
    color: var(--gray-900);
    min-height: 100vh;
    display: flex;
    }
    /* Sidebar Styles */
    .sidebar {
    width: 280px;
    background: white;
   
    border-right: 1px solid var(--gray-200);
    height: 100vh;
    position: fixed;
    left: 0;
    top: 0;
    overflow-y: auto;
    transition: all 0.3s ease;
    }
    .sidebar-header {
    padding: 1.5rem;
    border-bottom: 1px solid var(--gray-200);
    }
    .logo {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--primary);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    }
    .nav-menu {
    padding: 1rem 0;
    }
    .nav-group {
    padding: 0.5rem 1rem;
    color: var(--gray-500);
    font-size: 0.875rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    }
    .nav-item {
    padding: 0.75rem 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--gray-700);
    cursor: pointer;
    transition: all 0.2s;
    border-left: 3px solid transparent;
    }
    .nav-item:hover {
    background-color: var(--gray-50);
    color: var(--primary);
    }
   
    .nav-item.active {
    background-color: var(--gray-50);
    color: var(--primary);
    border-left-color: var(--primary);
    font-weight: 500;
    }
    .nav-item i {
    width: 1.25rem;
    text-align: center;
    }
    /* Main Content */
    .main-content {
    flex: 1;
    margin-left: 280px;
    padding: 2rem;
    }
    /* Header */
    .content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    }
    .page-title {
    font-size: 1.875rem;
    font-weight: 700;
    color: var(--gray-900);
    }
    .header-actions {
    display: flex;
    gap: 1rem;
    }
    /* Cards Grid */
    .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(240px, 
   1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
    }
    .stat-card {
    background: white;
    padding: 1.5rem;
    border-radius: 1rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
   
    transition: transform 0.2s ease;
    }
    .stat-card:hover {
    transform: translateY(-2px);
    }
    .stat-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    }
    .stat-title {
    color: var(--gray-600);
    font-size: 0.875rem;
    font-weight: 500;
    }
    .stat-icon {
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 0.75rem;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    }
    .stat-value {
    font-size: 1.875rem;
    font-weight: 700;
    color: var(--gray-900);
    margin-bottom: 0.5rem;
    }
    .stat-trend {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    }
    .trend-positive {
    color: var(--success);
    }
    .trend-negative {
    color: var(--danger);
    }
   
    /* Charts Grid */
    .charts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 
   1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
    }
    .chart-card {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    .chart-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    }
    .chart-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--gray-900);
    }
    .chart-actions {
    display: flex;
    gap: 0.5rem;
    }
    /* Table Styles */
    .table-container {
    background: white;
    border-radius: 1rem;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    overflow: hidden;
    }
    .table-header {
    padding: 1.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid var(--gray-200);
    }
    .table {
    width: 100%;
   
    border-collapse: collapse;
    }
    .table th {
    background: var(--gray-50);
    padding: 1rem 1.5rem;
    text-align: left;
    font-weight: 500;
    color: var(--gray-600);
    border-bottom: 1px solid var(--gray-200);
    }
    .table td {
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--gray-200);
    }
    .table tr:hover {
    background: var(--gray-50);
    }
    /* Buttons */
    .btn {
    padding: 0.625rem 1.25rem;
    border-radius: 0.5rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    transition: all 0.2s;
    border: none;
    font-size: 0.875rem;
    }
    .btn-primary {
    background: var(--primary);
    color: white;
    }
    .btn-primary:hover {
    background: var(--primary-dark);
    }
    .btn-outline {
    border: 1px solid var(--gray-300);
    background: white;
    color: var(--gray-700);
    }
    .btn-outline:hover {
    border-color: var(--gray-400);
   
    background: var(--gray-50);
    }
    /* Status Badges */
    .badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
    }
    .badge-success {
    background: #DEF7EC;
    color: #03543F;
    }
    .badge-warning {
    background: #FEF3C7;
    color: #92400E;
    }
    .badge-danger {
    background: #FEE2E2;
    color: #991B1B;
    }
	
	/* core/static/styles.css */
/* General body styles */
body {
    margin: 0;
    font-family: 'Arial', sans-serif;
    background: linear-gradient(135deg, #6f86d6, #48c6ef);
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

/* Container for the login card */
.login-container {
    background: rgba(255, 255, 255, 0.15);
    backdrop-filter: blur(15px);
    padding: 20px;
    border-radius: 20px;
    width: 350px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.25);
    text-align: center;
}

/* Avatar circle at the top */
.avatar img {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: #233567;
    padding: 10px;
}

/* Input field groups */
.input-group {
    margin: 20px 0;
    text-align: left;
}

.input-group label {
    font-size: 14px;
    color: #fff;
    margin-bottom: 5px;
    display: block;
}

.input-group input {
    width: 100%;
    padding: 10px;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    color: #333;
    background: #ffffff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}



/* Login button styles */
.login-button {
    width: 100%;
    padding: 10px;
    margin-top: 10px;
    background: #4a90e2;
    border: none;
    border-radius: 5px;
    color: #fff;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}

.login-button:hover {
    background: #357ABD;
}


<!-- core/templates/add_contract.html -->
{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Ajouter un Contrat</h1>
<form method="post" action="{% url 'add_contract' %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="employee">Employé :</label>
        <select id="employee" name="employee" class="form-control" required>
            {% for employee in employees %}
            <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="type">Type de Contrat :</label>
        <select id="type" name="type" class="form-control" required>
            <option value="CDI">CDI</option>
            <option value="CDD">CDD</option>
            <option value="STAGE">Stage</option>
        </select>
    </div>
    <div class="form-group">
        <label for="start_date">Date de Début :</label>
        <input type="date" id="start_date" name="start_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="end_date">Date de Fin :</label>
        <input type="date" id="end_date" name="end_date" class="form-control">
    </div>
    <button type="submit" class="btn btn-primary">Ajouter</button>
</form>
{% endblock %}

<!-- core/templates/add_employee.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Ajouter un Employé</h1>
<form method="post" action="{% url 'add_employee' %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="nom">Nom :</label>
        <input type="text" id="nom" name="nom" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="prenom">Prénom :</label>
        <input type="text" id="prenom" name="prenom" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="code">Code :</label>
        <input type="text" id="code" name="code" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="service">Service :</label>
        <select id="service" name="service" class="form-control" required>
            {% for service in services %}
            <option value="{{ service.id }}">{{ service.description }}</option>
            {% endfor %}
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Ajouter</button>
</form>
{% endblock %}
<!-- core/templates/add_evaluation.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Ajouter une Évaluation</h1>
<form method="post" action="{% url 'add_evaluation' %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="employee">Employé :</label>
        <select id="employee" name="employee" class="form-control" required>
            {% for employee in employees %}
            <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="score">Score :</label>
        <input type="number" id="score" name="score" class="form-control" min="0" max="100" required>
    </div>
    <div class="form-group">
        <label for="comments">Commentaires :</label>
        <textarea id="comments" name="comments" class="form-control" required></textarea>
    </div>
    <button type="submit" class="btn btn-primary">Ajouter</button>
</form>
{% endblock %}

<!-- core/templates/add_favorite.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Ajouter un Favori</h1>
<form method="post" action="{% url 'add_favorite' %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="name">Nom :</label>
        <input type="text" id="name" name="name" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="url">URL :</label>
        <input type="url" id="url" name="url" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Ajouter</button>
</form>
{% endblock %}

<!-- core/templates/approve_leave.html -->
{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Approuver un Congé</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ leave.employee.nom }} {{ leave.employee.prenom }}</h5>
        <p class="card-text">Type : {{ leave.type }}</p>
        <p class="card-text">Du {{ leave.start_date }} au {{ leave.end_date }}</p>
    </div>
</div>
<form method="post" action="{% url 'approve_leave' leave.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-success">Approuver</button>
</form>
<a href="{% url 'manage_leaves' %}" class="btn btn-secondary">Retour</a>
{% endblock %}

<!-- core/templates/base.html -->
{% load static %}
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestion RH</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
</head>
<body>
    <!-- Sidebar -->
    <aside class="sidebar">
        <div class="sidebar-header">
            <div class="logo">
                <i class="fas fa-shield-alt"></i>
                HR System
            </div>
        </div>
        <nav class="nav-menu">
            <div class="nav-group">Menu Principal</div>
            <a href="{% url 'manage_dashboard' %}" class="nav-item active">
                <i class="fas fa-chart-pie"></i>
                Tableau de bord
            </a>
            <a href="{% url 'manage_employees' %}" class="nav-item">
                <i class="fas fa-users"></i>
                Employés
            </a>
            <a href="{% url 'manage_contracts' %}" class="nav-item">
                <i class="fas fa-file-contract"></i>
                Contrats
            </a>
            <a href="{% url 'manage_leaves' %}" class="nav-item">
                <i class="fas fa-calendar-alt"></i>
                Congés
            </a>
            <div class="nav-group">RH</div>
            <a href="{% url 'manage_salaries' %}" class="nav-item">
                <i class="fas fa-money-bill-wave"></i>
                Paie
            </a>
            <a href="{% url 'manage_evaluations' %}" class="nav-item">
                <i class="fas fa-star"></i>
                Évaluations
            </a>
            <a href="{% url 'manage_recruitment' %}" class="nav-item">
                <i class="fas fa-user-plus"></i>
                Recrutement
            </a>
            <div class="nav-group">Paramètres</div>
            <!-- <a href="{% url 'configuration' %}" class="nav-item">
                       <i class="fas fa-cog"></i>
                         Configuration
                 </a> -->
        </nav>
    </aside>

    <!-- Main Content -->
    <main class="main-content">
        {% block content %}
        {% endblock %}
    </main>
</body>
</html>

<!-- core/templates/contracts.html -->
{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Gestion des Contrats</h1>
<div class="mb-4">
    <h2>Ajouter un Contrat</h2>
    <form method="post" action="{% url 'add_contract' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="employee" class="form-label">Employé :</label>
            <select id="employee" name="employee" class="form-select" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="mb-3">
            <label for="type" class="form-label">Type de Contrat :</label>
            <select id="type" name="type" class="form-select" required>
                <option value="CDI">CDI</option>
                <option value="CDD">CDD</option>
                <option value="STAGE">Stage</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="start_date" class="form-label">Date de Début :</label>
            <input type="date" id="start_date" name="start_date" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="end_date" class="form-label">Date de Fin :</label>
            <input type="date" id="end_date" name="end_date" class="form-control">
        </div>
        <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
</div>
<div>
    <h2>Liste des Contrats</h2>
    <ul class="list-group">
        {% for contract in contracts %}
        <li class="list-group-item">
            {{ contract.employee.nom }} {{ contract.employee.prenom }} - {{ contract.type }} ({{ contract.start_date }} à {{ contract.end_date }})
            <a href="{% url 'edit_contract' contract.id %}" class="btn btn-sm btn-warning">Modifier</a>
            <form method="post" action="{% url 'delete_contract' contract.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/dashboard.html -->
{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Tableau de Bord</h1>
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-header">
            <span class="stat-title">Employés Total</span>
            <div class="stat-icon" style="background: var(--primary);">
                <i class="fas fa-users"></i>
            </div>
        </div>
        <div class="stat-value">{{ total_employees }}</div>
        <div class="stat-trend trend-positive">
            <i class="fas fa-arrow-up"></i>
            12.5% depuis le dernier mois
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-header">
            <span class="stat-title">Contrats Actifs</span>
            <div class="stat-icon" style="background: var(--success);">
                <i class="fas fa-file-contract"></i>
            </div>
        </div>
        <div class="stat-value">{{ active_contracts }}</div>
        <div class="stat-trend trend-positive">
            <i class="fas fa-arrow-up"></i>
            8.2% depuis le dernier mois
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-header">
            <span class="stat-title">Congés en Attente</span>
            <div class="stat-icon" style="background: var(--warning);">
                <i class="fas fa-clock"></i>
            </div>
        </div>
        <div class="stat-value">{{ pending_leaves }}</div>
        <div class="stat-trend trend-negative">
            <i class="fas fa-arrow-down"></i>
            3.8% depuis le dernier mois
        </div>
    </div>
</div>

<div class="charts-grid">
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Évolution des Effectifs</h3>
            <div class="chart-actions">
                <button class="btn btn-outline">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>
        <canvas id="employeesChart"></canvas>
    </div>
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Distribution des Congés</h3>
            <div class="chart-actions">
                <button class="btn btn-outline">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>
        <canvas id="leavesChart"></canvas>
    </div>
</div>
{% endblock %}

<!-- core/templates/delete_contract.html -->
{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer un Contrat</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ contract.employee.nom }} {{ contract.employee.prenom }}</h5>
        <p class="card-text">Type : {{ contract.type }}</p>
        <p class="card-text">Du {{ contract.start_date }} au {{ contract.end_date }}</p>
    </div>
</div>
<form method="post" action="{% url 'delete_contract' contract.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_contracts' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/delete_employe.html -->
{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer un Employé</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ employee.nom }} {{ employee.prenom }}</h5>
        <p class="card-text">Code : {{ employee.code }}</p>
        <p class="card-text">Service : {{ employee.service.description }}</p>
    </div>
</div>
<form method="post" action="{% url 'delete_employee' employee.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_employees' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/delete_evaluation.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer une Évaluation</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ evaluation.employee.nom }} {{ evaluation.employee.prenom }}</h5>
        <p class="card-text">Score : {{ evaluation.performance_score }}</p>
        <p class="card-text">Commentaires : {{ evaluation.comments }}</p>
    </div>
</div>
<form method="post" action="{% url 'delete_evaluation' evaluation.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_evaluations' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/delete_favorite.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer un Favori</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ favorite.name }}</h5>
        <p class="card-text">{{ favorite.url }}</p>
    </div>
</div>
<form method="post" action="{% url 'remove_favorite' favorite.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_favorites' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/delete_job.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer une Offre d'Emploi</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ job.title }}</h5>
        <p class="card-text">{{ job.description }}</p>
        <p class="card-text">Type de Contrat : {{ job.contract_type }}</p>
    </div>
</div>
<form method="post" action="{% url 'delete_job' job.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_recruitment' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/delete_leave.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer un Congé</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ leave.employee.nom }} {{ leave.employee.prenom }}</h5>
        <p class="card-text">Type : {{ leave.type }}</p>
        <p class="card-text">Du {{ leave.start_date }} au {{ leave.end_date }}</p>
    </div>
</div>
<form method="post" action="{% url 'delete_leave' leave.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_leaves' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/delete_salary.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer une Fiche de Paie</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ salary.employee.nom }} {{ salary.employee.prenom }}</h5>
        <p class="card-text">Mois : {{ salary.month }}/{{ salary.year }}</p>
        <p class="card-text">Salaire Net : {{ salary.net_salary }}</p>
    </div>
</div>
<form method="post" action="{% url 'delete_salary' salary.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_salaries' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/edit_contract.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Modifier un Contrat</h1>
<form method="post" action="{% url 'edit_contract' contract.id %}">
    {% csrf_token %}
    <div class="mb-3">
        <label for="employee" class="form-label">Employé :</label>
        <select id="employee" name="employee" class="form-select" required>
            {% for employee in employees %}
            <option value="{{ employee.id }}" {% if employee.id == contract.employee.id %}selected{% endif %}>{{ employee.nom }} {{ employee.prenom }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="mb-3">
        <label for="type" class="form-label">Type de Contrat :</label>
        <select id="type" name="type" class="form-select" required>
            <option value="CDI" {% if contract.type == 'CDI' %}selected{% endif %}>CDI</option>
            <option value="CDD" {% if contract.type == 'CDD' %}selected{% endif %}>CDD</option>
            <option value="STAGE" {% if contract.type == 'STAGE' %}selected{% endif %}>Stage</option>
        </select>
    </div>
    <div class="mb-3">
        <label for="start_date" class="form-label">Date de Début :</label>
        <input type="date" id="start_date" name="start_date" class="form-control" value="{{ contract.start_date|date:'Y-m-d' }}" required>
    </div>
    <div class="mb-3">
        <label for="end_date" class="form-label">Date de Fin :</label>
        <input type="date" id="end_date" name="end_date" class="form-control" value="{{ contract.end_date|date:'Y-m-d' }}">
    </div>
    <button type="submit" class="btn btn-primary">Enregistrer</button>
</form>
{% endblock %}

<!-- core/templates/edit_employee.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Modifier un Employé</h1>
<form method="post" action="{% url 'edit_employee' employee.id %}">
    {% csrf_token %}
    <div class="mb-3">
        <label for="nom" class="form-label">Nom :</label>
        <input type="text" id="nom" name="nom" class="form-control" value="{{ employee.nom }}" required>
    </div>
    <div class="mb-3">
        <label for="prenom" class="form-label">Prénom :</label>
        <input type="text" id="prenom" name="prenom" class="form-control" value="{{ employee.prenom }}" required>
    </div>
    <div class="mb-3">
        <label for="code" class="form-label">Code :</label>
        <input type="text" id="code" name="code" class="form-control" value="{{ employee.code }}" required>
    </div>
    <div class="mb-3">
        <label for="service" class="form-label">Service :</label>
        <select id="service" name="service" class="form-select" required>
            {% for service in services %}
            <option value="{{ service.id }}" {% if service.id == employee.service.id %}selected{% endif %}>{{ service.description }}</option>
            {% endfor %}
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Enregistrer</button>
</form>
{% endblock %}

<!-- core/templates/edit_evaluation.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Modifier une Évaluation</h1>
<form method="post" action="{% url 'edit_evaluation' evaluation.id %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="employee">Employé :</label>
        <select id="employee" name="employee" class="form-control" required>
            {% for employee in employees %}
            <option value="{{ employee.id }}" {% if employee.id == evaluation.employee.id %}selected{% endif %}>{{ employee.nom }} {{ employee.prenom }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="score">Score :</label>
        <input type="number" id="score" name="score" class="form-control" value="{{ evaluation.performance_score }}" min="0" max="100" required>
    </div>
    <div class="form-group">
        <label for="comments">Commentaires :</label>
        <textarea id="comments" name="comments" class="form-control" required>{{ evaluation.comments }}</textarea>
    </div>
    <button type="submit" class="btn btn-primary">Enregistrer</button>
</form>
<a href="{% url 'manage_evaluations' %}" class="btn btn-secondary">Retour</a>
{% endblock %}

<!-- core/templates/employees.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Gestion des Employés</h1>
<a href="{% url 'add_employee' %}" class="btn btn-primary mb-3">Ajouter un Employé</a>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Nom</th>
            <th>Prénom</th>
            <th>Code</th>
            <th>Service</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        {% for employee in employees %}
        <tr>
            <td>{{ employee.nom }}</td>
            <td>{{ employee.prenom }}</td>
            <td>{{ employee.code }}</td>
            <td>{{ employee.service.description }}</td>
            <td>
                <a href="{% url 'edit_employee' employee.id %}" class="btn btn-sm btn-warning">Modifier</a>
                <form method="post" action="{% url 'delete_employee' employee.id %}" style="display:inline;">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
                </form>
            </td>
        </tr>
        {% endfor %}
    </tbody>
</table>
{% endblock %}

<!-- core/templates/evaluation_reports.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Rapports d'Évaluation</h1>
<div class="mb-4">
    <h2>Top Performeurs</h2>
    <ul class="list-group">
        {% for evaluation in top_evaluations %}
        <li class="list-group-item">
            {{ evaluation.employee.nom }} {{ evaluation.employee.prenom }} - Score Moyen : {{ evaluation.avg_score }}
        </li>
        {% endfor %}
    </ul>
</div>
<div>
    <h2>Statistiques Globales</h2>
    <p class="lead">Score Moyen : {{ average_score }}</p>
</div>
{% endblock %}

<!-- core/templates/evaluations.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Gestion des Évaluations</h1>
<div class="mb-4">
    <h2>Nouvelle Évaluation</h2>
    <form method="post" action="{% url 'add_evaluation' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="employee" class="form-label">Employé :</label>
            <select id="employee" name="employee" class="form-select" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="mb-3">
            <label for="score" class="form-label">Score :</label>
            <input type="number" id="score" name="score" class="form-control" min="0" max="100" required>
        </div>
        <div class="mb-3">
            <label for="comments" class="form-label">Commentaires :</label>
            <textarea id="comments" name="comments" class="form-control" required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
</div>
<div>
    <h2>Liste des Évaluations</h2>
    <ul class="list-group">
        {% for evaluation in evaluations %}
        <li class="list-group-item">
            {{ evaluation.employee.nom }} {{ evaluation.employee.prenom }} - Score : {{ evaluation.performance_score }}
            <a href="{% url 'edit_evaluation' evaluation.id %}" class="btn btn-sm btn-warning">Modifier</a>
            <form method="post" action="{% url 'delete_evaluation' evaluation.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/favorites.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Gestion des Favoris</h1>
<div class="mb-4">
    <h2>Ajouter un Favori</h2>
    <form method="post" action="{% url 'add_favorite' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="name" class="form-label">Nom :</label>
            <input type="text" id="name" name="name" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="url" class="form-label">URL :</label>
            <input type="url" id="url" name="url" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
</div>
<div>
    <h2>Mes Favoris</h2>
    <ul class="list-group">
        {% for favorite in favorites %}
        <li class="list-group-item">
            <a href="{{ favorite.url }}" target="_blank">{{ favorite.name }}</a>
            <form method="post" action="{% url 'remove_favorite' favorite.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/generate_salary.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Générer une Fiche de Paie</h1>
<form method="post" action="{% url 'generate_salary' %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="employee">Employé :</label>
        <select id="employee" name="employee" class="form-control" required>
            {% for employee in employees %}
            <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="month">Mois :</label>
        <input type="number" id="month" name="month" class="form-control" min="1" max="12" required>
    </div>
    <div class="form-group">
        <label for="year">Année :</label>
        <input type="number" id="year" name="year" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Générer</button>
</form>
<a href="{% url 'manage_salaries' %}" class="btn btn-secondary">Retour</a>
{% endblock %}

<!-- core/templates/grant_permission.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Accorder des Permissions</h1>
<div class="card">
    <div class="card-body">
        <h2 class="card-title">Accorder des Permissions à un Utilisateur</h2>
        <form method="post" action="{% url 'grant_permissions' %}">
            {% csrf_token %}
            <div class="form-group">
                <label for="user">Utilisateur :</label>
                <select id="user" name="user" class="form-control" required>
                    {% for user in users %}
                    <option value="{{ user.id }}">{{ user.username }}</option>
                    {% endfor %}
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Permissions :</label>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="can_manage_employees" name="can_manage_employees">
                    <label class="form-check-label" for="can_manage_employees">Gérer les employés</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="can_manage_contracts" name="can_manage_contracts">
                    <label class="form-check-label" for="can_manage_contracts">Gérer les contrats</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="can_manage_leaves" name="can_manage_leaves">
                    <label class="form-check-label" for="can_manage_leaves">Gérer les congés</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="can_manage_salaries" name="can_manage_salaries">
                    <label class="form-check-label" for="can_manage_salaries">Gérer les salaires</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="can_manage_recruitment" name="can_manage_recruitment">
                    <label class="form-check-label" for="can_manage_recruitment">Gérer le recrutement</label>
                </div>
            </div>
            <button type="submit" class="btn btn-primary">Accorder les Permissions</button>
        </form>
    </div>
</div>
{% endblock %}

<!-- core/templates/leaves.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Gestion des Congés</h1>
<div class="mb-4">
    <h2>Demander un Congé</h2>
    <form method="post" action="{% url 'request_leave' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="employee" class="form-label">Employé :</label>
            <select id="employee" name="employee" class="form-select" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="mb-3">
            <label for="type" class="form-label">Type de Congé :</label>
            <select id="type" name="type" class="form-select" required>
                <option value="ANNUAL">Congé Annuel</option>
                <option value="SICK">Congé Maladie</option>
                <option value="MATERNITY">Congé Maternité</option>
                <option value="PATERNITY">Congé Paternité</option>
                <option value="UNPAID">Congé Sans Solde</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="start_date" class="form-label">Date de Début :</label>
            <input type="date" id="start_date" name="start_date" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="end_date" class="form-label">Date de Fin :</label>
            <input type="date" id="end_date" name="end_date" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Demander</button>
    </form>
</div>
<div>
    <h2>Liste des Congés</h2>
    <ul class="list-group">
        {% for leave in leaves %}
        <li class="list-group-item">
            {{ leave.employee.nom }} {{ leave.employee.prenom }} - {{ leave.type }} ({{ leave.start_date }} à {{ leave.end_date }})
            <a href="{% url 'approve_leave' leave.id %}" class="btn btn-sm btn-success">Approuver</a>
            <form method="post" action="{% url 'delete_leave' leave.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/login.html -->
{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connexion</title>
    <link rel="stylesheet" href="{% static 'styles.css' %}">
</head>
<body>
    <div class="login-container">
        <h1>Sign in</h1>
        <p>Sign in with your username and password</p>
        <form method="post" action="{% url 'login' %}">
            {% csrf_token %}
            <div class="input-group">
                <label for="username">Your username</label>
                <input type="text" id="username" name="username" placeholder="Enter Username" required>
            </div>
            <div class="input-group">
                <label for="password">Your password</label>
                <input type="password" id="password" name="password" placeholder="Enter Password" required>
            </div>

            <button type="submit" class="login-button">Login</button>
        </form>
    </div>
</body>
</html>

<!-- core/templates/manage_contracts.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Gestion des Contrats</h1>
<div class="mb-4">
    <h2>Ajouter un Contrat</h2>
    <form method="post" action="{% url 'add_contract' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="employee">Employé :</label>
            <select id="employee" name="employee" class="form-control" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="type">Type de Contrat :</label>
            <select id="type" name="type" class="form-control" required>
                <option value="CDI">CDI</option>
                <option value="CDD">CDD</option>
                <option value="STAGE">Stage</option>
            </select>
        </div>
        <div class="form-group">
            <label for="start_date">Date de Début :</label>
            <input type="date" id="start_date" name="start_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="end_date">Date de Fin :</label>
            <input type="date" id="end_date" name="end_date" class="form-control">
        </div>
        <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
</div>
<div>
    <h2>Liste des Contrats</h2>
    <ul class="list-group">
        {% for contract in contracts %}
        <li class="list-group-item">
            {{ contract.employee.nom }} {{ contract.employee.prenom }} - {{ contract.type }} ({{ contract.start_date }} à {{ contract.end_date }})
            <a href="{% url 'edit_contract' contract.id %}" class="btn btn-sm btn-warning">Modifier</a>
            <form method="post" action="{% url 'delete_contract' contract.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/manage_dashboard.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Tableau de Bord</h1>
<div class="stats-grid">
    <div class="stat-card">
        <div class="stat-header">
            <span class="stat-title">Employés Total</span>
            <div class="stat-icon" style="background: var(--primary);">
                <i class="fas fa-users"></i>
            </div>
        </div>
        <div class="stat-value">{{ total_employees }}</div>
        <div class="stat-trend trend-positive">
            <i class="fas fa-arrow-up"></i>
            12.5% depuis le dernier mois
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-header">
            <span class="stat-title">Contrats Actifs</span>
            <div class="stat-icon" style="background: var(--success);">
                <i class="fas fa-file-contract"></i>
            </div>
        </div>
        <div class="stat-value">{{ active_contracts }}</div>
        <div class="stat-trend trend-positive">
            <i class="fas fa-arrow-up"></i>
            8.2% depuis le dernier mois
        </div>
    </div>
    <div class="stat-card">
        <div class="stat-header">
            <span class="stat-title">Congés en Attente</span>
            <div class="stat-icon" style="background: var(--warning);">
                <i class="fas fa-clock"></i>
            </div>
        </div>
        <div class="stat-value">{{ pending_leaves }}</div>
        <div class="stat-trend trend-negative">
            <i class="fas fa-arrow-down"></i>
            3.8% depuis le dernier mois
        </div>
    </div>
</div>

<div class="charts-grid">
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Évolution des Effectifs</h3>
            <div class="chart-actions">
                <button class="btn btn-outline">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>
        <canvas id="employeesChart"></canvas>
    </div>
    <div class="chart-card">
        <div class="chart-header">
            <h3 class="chart-title">Distribution des Congés</h3>
            <div class="chart-actions">
                <button class="btn btn-outline">
                    <i class="fas fa-filter"></i>
                </button>
            </div>
        </div>
        <canvas id="leavesChart"></canvas>
    </div>
</div>
{% endblock %}

<!-- core/templates/manage_employees.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Gestion des Employés</h1>
<a href="{% url 'add_employee' %}" class="btn btn-primary mb-3">Ajouter un Employé</a>
<div class="table-container">
    <div class="table-header">
        <h3>Liste des Employés</h3>
        <div class="header-actions">
            <button class="btn btn-outline">
                <i class="fas fa-filter"></i>
            </button>
        </div>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Nom</th>
                <th>Prénom</th>
                <th>Code</th>
                <th>Service</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            {% for employee in employees %}
            <tr>
                <td>{{ employee.nom }}</td>
                <td>{{ employee.prenom }}</td>
                <td>{{ employee.code }}</td>
                <td>{{ employee.service.description }}</td>
                <td>
                    <a href="{% url 'edit_employee' employee.id %}" class="btn btn-sm btn-warning">Modifier</a>
                    <form method="post" action="{% url 'delete_employee' employee.id %}" style="display:inline;">
                        {% csrf_token %}
                        <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
                    </form>
                </td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>
{% endblock %}

<!-- core/templates/manage_evaluations.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Gestion des Évaluations</h1>
<div class="mb-4">
    <h2>Nouvelle Évaluation</h2>
    <form method="post" action="{% url 'add_evaluation' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="employee">Employé :</label>
            <select id="employee" name="employee" class="form-control" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="score">Score :</label>
            <input type="number" id="score" name="score" class="form-control" min="0" max="100" required>
        </div>
        <div class="form-group">
            <label for="comments">Commentaires :</label>
            <textarea id="comments" name="comments" class="form-control" required></textarea>
        </div>
        <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
</div>
<div>
    <h2>Liste des Évaluations</h2>
    <ul class="list-group">
        {% for evaluation in evaluations %}
        <li class="list-group-item">
            {{ evaluation.employee.nom }} {{ evaluation.employee.prenom }} - Score : {{ evaluation.performance_score }}
            <a href="{% url 'edit_evaluation' evaluation.id %}" class="btn btn-sm btn-warning">Modifier</a>
            <form method="post" action="{% url 'delete_evaluation' evaluation.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/manage_favorites.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Gestion des Favoris</h1>
<div class="mb-4">
    <h2>Ajouter un Favori</h2>
    <form method="post" action="{% url 'add_favorite' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="name">Nom :</label>
            <input type="text" id="name" name="name" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="url">URL :</label>
            <input type="url" id="url" name="url" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Ajouter</button>
    </form>
</div>
<div>
    <h2>Mes Favoris</h2>
    <ul class="list-group">
        {% for favorite in favorites %}
        <li class="list-group-item">
            <a href="{{ favorite.url }}" target="_blank">{{ favorite.name }}</a>
            <form method="post" action="{% url 'remove_favorite' favorite.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/manage_leaves.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Gestion des Congés</h1>
<div class="mb-4">
    <h2>Demander un Congé</h2>
    <form method="post" action="{% url 'request_leave' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="employee">Employé :</label>
            <select id="employee" name="employee" class="form-control" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="type">Type de Congé :</label>
            <select id="type" name="type" class="form-control" required>
                <option value="ANNUAL">Congé Annuel</option>
                <option value="SICK">Congé Maladie</option>
                <option value="MATERNITY">Congé Maternité</option>
                <option value="PATERNITY">Congé Paternité</option>
                <option value="UNPAID">Congé Sans Solde</option>
            </select>
        </div>
        <div class="form-group">
            <label for="start_date">Date de Début :</label>
            <input type="date" id="start_date" name="start_date" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="end_date">Date de Fin :</label>
            <input type="date" id="end_date" name="end_date" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Demander</button>
    </form>
</div>
<div>
    <h2>Liste des Congés</h2>
    <ul class="list-group">
        {% for leave in leaves %}
        <li class="list-group-item">
            {{ leave.employee.nom }} {{ leave.employee.prenom }} - {{ leave.type }} ({{ leave.start_date }} à {{ leave.end_date }})
            <a href="{% url 'approve_leave' leave.id %}" class="btn btn-sm btn-success">Approuver</a>
            <form method="post" action="{% url 'delete_leave' leave.id %}" style="display:inline;">
                {% csrf_token %}
                <button type="submit" class="btn btn-sm btn-danger">Supprimer</button>
            </form>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/manage_recruitment.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Gestion des Recrutements</h1>
<div class="mb-4">
    <h2>Publier une Offre d'Emploi</h2>
    <form method="post" action="{% url 'post_job' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="title">Titre :</label>
            <input type="text" id="title" name="title" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="description">Description :</label>
            <textarea id="description" name="description" class="form-control" required></textarea>
        </div>
        <div class="form-group">
            <label for="contract_type">Type de Contrat :</label>
            <select id="contract_type" name="contract_type" class="form-control" required>
                <option value="CDI">CDI</option>
                <option value="CDD">CDD</option>
                <option value="STAGE">Stage</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Publier</button>
    </form>
</div>
<div>
    <h2>Liste des Offres d'Emploi</h2>
    <ul class="list-group">
        {% for job in job_postings %}
        <li class="list-group-item">
            {{ job.title }} - {{ job.contract_type }}
            <a href="{% url 'view_job' job.id %}" class="btn btn-sm btn-info">Voir</a>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/manage_salaries.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Gestion des Salaires</h1>
<div class="mb-4">
    <h2>Générer une Fiche de Paie</h2>
    <form method="post" action="{% url 'generate_salary' %}">
        {% csrf_token %}
        <div class="form-group">
            <label for="employee">Employé :</label>
            <select id="employee" name="employee" class="form-control" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="form-group">
            <label for="month">Mois :</label>
            <input type="number" id="month" name="month" class="form-control" min="1" max="12" required>
        </div>
        <div class="form-group">
            <label for="year">Année :</label>
            <input type="number" id="year" name="year" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Générer</button>
    </form>
</div>
<div>
    <h2>Liste des Fiches de Paie</h2>
    <ul class="list-group">
        {% for salary in salaries %}
        <li class="list-group-item">
            {{ salary.employee.nom }} {{ salary.employee.prenom }} - Mois : {{ salary.month }}/{{ salary.year }} - Net : {{ salary.net_salary }}
            <a href="{% url 'view_salary' salary.id %}" class="btn btn-sm btn-info">Voir</a>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/post_job.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Publier une Offre d'Emploi</h1>
<form method="post" action="{% url 'post_job' %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="title">Titre :</label>
        <input type="text" id="title" name="title" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="description">Description :</label>
        <textarea id="description" name="description" class="form-control" required></textarea>
    </div>
    <div class="form-group">
        <label for="contract_type">Type de Contrat :</label>
        <select id="contract_type" name="contract_type" class="form-control" required>
            <option value="CDI">CDI</option>
            <option value="CDD">CDD</option>
            <option value="STAGE">Stage</option>
        </select>
    </div>
    <button type="submit" class="btn btn-primary">Publier</button>
</form>
{% endblock %}

<!-- core/templates/recruitment.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Gestion des Recrutements</h1>
<div class="mb-4">
    <h2>Publier une Offre d'Emploi</h2>
    <form method="post" action="{% url 'post_job' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="title" class="form-label">Titre :</label>
            <input type="text" id="title" name="title" class="form-control" required>
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description :</label>
            <textarea id="description" name="description" class="form-control" required></textarea>
        </div>
        <div class="mb-3">
            <label for="contract_type" class="form-label">Type de Contrat :</label>
            <select id="contract_type" name="contract_type" class="form-select" required>
                <option value="CDI">CDI</option>
                <option value="CDD">CDD</option>
                <option value="STAGE">Stage</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Publier</button>
    </form>
</div>
<div>
    <h2>Liste des Offres d'Emploi</h2>
    <ul class="list-group">
        {% for job in job_postings %}
        <li class="list-group-item">
            {{ job.title }} - {{ job.contract_type }}
            <a href="{% url 'view_job' job.id %}" class="btn btn-sm btn-info">Voir</a>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/remove_favorite.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Supprimer un Favori</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ favorite.name }}</h5>
        <p class="card-text">{{ favorite.url }}</p>
    </div>
</div>
<form method="post" action="{% url 'remove_favorite' favorite.id %}">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger mt-3">Confirmer la suppression</button>
</form>
<a href="{% url 'manage_favorites' %}" class="btn btn-secondary mt-3">Retour</a>
{% endblock %}

<!-- core/templates/request_leave.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Demander un Congé</h1>
<form method="post" action="{% url 'request_leave' %}">
    {% csrf_token %}
    <div class="form-group">
        <label for="employee">Employé :</label>
        <select id="employee" name="employee" class="form-control" required>
            {% for employee in employees %}
            <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
            {% endfor %}
        </select>
    </div>
    <div class="form-group">
        <label for="type">Type de Congé :</label>
        <select id="type" name="type" class="form-control" required>
            <option value="ANNUAL">Congé Annuel</option>
            <option value="SICK">Congé Maladie</option>
            <option value="MATERNITY">Congé Maternité</option>
            <option value="PATERNITY">Congé Paternité</option>
            <option value="UNPAID">Congé Sans Solde</option>
        </select>
    </div>
    <div class="form-group">
        <label for="start_date">Date de Début :</label>
        <input type="date" id="start_date" name="start_date" class="form-control" required>
    </div>
    <div class="form-group">
        <label for="end_date">Date de Fin :</label>
        <input type="date" id="end_date" name="end_date" class="form-control" required>
    </div>
    <button type="submit" class="btn btn-primary">Demander</button>
</form>
<a href="{% url 'manage_leaves' %}" class="btn btn-secondary">Retour</a>
{% endblock %}

<!-- core/templates/salaries.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="mb-4">Gestion des Salaires</h1>
<div class="mb-4">
    <h2>Générer une Fiche de Paie</h2>
    <form method="post" action="{% url 'generate_salary' %}">
        {% csrf_token %}
        <div class="mb-3">
            <label for="employee" class="form-label">Employé :</label>
            <select id="employee" name="employee" class="form-select" required>
                {% for employee in employees %}
                <option value="{{ employee.id }}">{{ employee.nom }} {{ employee.prenom }}</option>
                {% endfor %}
            </select>
        </div>
        <div class="mb-3">
            <label for="month" class="form-label">Mois :</label>
            <input type="number" id="month" name="month" class="form-control" min="1" max="12" required>
        </div>
        <div class="mb-3">
            <label for="year" class="form-label">Année :</label>
            <input type="number" id="year" name="year" class="form-control" required>
        </div>
        <button type="submit" class="btn btn-primary">Générer</button>
    </form>
</div>
<div>
    <h2>Liste des Fiches de Paie</h2>
    <ul class="list-group">
        {% for salary in salaries %}
        <li class="list-group-item">
            {{ salary.employee.nom }} {{ salary.employee.prenom }} - Mois : {{ salary.month }}/{{ salary.year }} - Net : {{ salary.net_salary }}
            <a href="{% url 'view_salary' salary.id %}" class="btn btn-sm btn-info">Voir</a>
        </li>
        {% endfor %}
    </ul>
</div>
{% endblock %}

<!-- core/templates/view_job.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">{{ job.title }}</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ job.title }}</h5>
        <p class="card-text">{{ job.description }}</p>
        <p class="card-text">Type de Contrat : {{ job.contract_type }}</p>
    </div>
</div>
<a href="{% url 'manage_recruitment' %}" class="btn btn-secondary">Retour</a>
{% endblock %}

<!-- core/templates/view_salary.html -->

{% extends "base.html" %}

{% block content %}
<h1 class="page-title">Fiche de Paie</h1>
<div class="card">
    <div class="card-body">
        <h5 class="card-title">{{ salary.employee.nom }} {{ salary.employee.prenom }}</h5>
        <p class="card-text">Mois : {{ salary.month }}/{{ salary.year }}</p>
        <p class="card-text">Salaire de Base : {{ salary.base_salary }}</p>
        <p class="card-text">Déductions pour Absences : {{ salary.absences_deduction }}</p>
        <p class="card-text">Salaire Net : {{ salary.net_salary }}</p>
    </div>
</div>
<a href="{% url 'manage_salaries' %}" class="btn btn-secondary">Retour</a>
{% endblock %}

# core/admin.py

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import (
    User, CustomPermission, Employee, Service, Contract, Leave, LeaveBalance,
    Attendance, Salary, SalaryAdvance, Evaluation, Training, Skill, EmployeeSkill,
    JobPosting, JobApplication, Favorite, Document, AuditLog, Notification
)

# Custom User Admin
class CustomUserAdmin(UserAdmin):
    list_display = ('username', 'email', 'is_hr', 'is_manager', 'is_employee')
    fieldsets = UserAdmin.fieldsets + (
        ('Custom Fields', {'fields': ('is_hr', 'is_manager', 'is_employee')}),
    )

# Custom Permission Admin
class CustomPermissionAdmin(admin.ModelAdmin):
    list_display = ('user', 'can_manage_employees', 'can_manage_contracts', 'can_manage_leaves', 'can_manage_salaries', 'can_manage_recruitment')
    search_fields = ('user__username',)
    list_filter = ('can_manage_employees', 'can_manage_contracts', 'can_manage_leaves', 'can_manage_salaries', 'can_manage_recruitment')

# Employee Admin
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ('code', 'nom', 'prenom', 'service', 'hire_date')
    search_fields = ('nom', 'prenom', 'code')
    list_filter = ('service', 'gender', 'hire_date')

# Service Admin
class ServiceAdmin(admin.ModelAdmin):
    list_display = ('code', 'description')
    search_fields = ('code', 'description')

# Contract Admin
class ContractAdmin(admin.ModelAdmin):
    list_display = ('employee', 'type', 'start_date', 'end_date', 'is_active')
    search_fields = ('employee__nom', 'employee__prenom')
    list_filter = ('type', 'is_active')

# Leave Admin
class LeaveAdmin(admin.ModelAdmin):
    list_display = ('employee', 'type', 'start_date', 'end_date', 'status')
    search_fields = ('employee__nom', 'employee__prenom')
    list_filter = ('type', 'status')

# Salary Admin
class SalaryAdmin(admin.ModelAdmin):
    list_display = ('employee', 'month', 'year', 'net_salary')
    search_fields = ('employee__nom', 'employee__prenom')
    list_filter = ('month', 'year')

# Evaluation Admin
class EvaluationAdmin(admin.ModelAdmin):
    list_display = ('employee', 'evaluator', 'date', 'performance_score')
    search_fields = ('employee__nom', 'employee__prenom')
    list_filter = ('date', 'performance_score')

# Training Admin
class TrainingAdmin(admin.ModelAdmin):
    list_display = ('employee', 'title', 'start_date', 'end_date', 'status')
    search_fields = ('employee__nom', 'employee__prenom', 'title')
    list_filter = ('status', 'start_date')

# Skill Admin
class SkillAdmin(admin.ModelAdmin):
    list_display = ('name', 'category')
    search_fields = ('name', 'category')

# EmployeeSkill Admin
class EmployeeSkillAdmin(admin.ModelAdmin):
    list_display = ('employee', 'skill', 'level', 'acquired_date')
    search_fields = ('employee__nom', 'employee__prenom', 'skill__name')
    list_filter = ('level', 'acquired_date')

# JobPosting Admin
class JobPostingAdmin(admin.ModelAdmin):
    list_display = ('title', 'contract_type', 'service', 'active')
    search_fields = ('title', 'contract_type', 'service__code')
    list_filter = ('contract_type', 'active')

# JobApplication Admin
class JobApplicationAdmin(admin.ModelAdmin):
    list_display = ('job_posting', 'candidate', 'status', 'interview_date')
    search_fields = ('job_posting__title', 'candidate__username')
    list_filter = ('status', 'interview_date')

# Favorite Admin
class FavoriteAdmin(admin.ModelAdmin):
    list_display = ('user', 'name', 'url', 'created_at')
    search_fields = ('user__username', 'name', 'url')
    list_filter = ('created_at',)

# Document Admin
class DocumentAdmin(admin.ModelAdmin):
    list_display = ('title', 'filename', 'created_at')
    search_fields = ('title', 'filename')
    list_filter = ('created_at',)

# AuditLog Admin
class AuditLogAdmin(admin.ModelAdmin):
    list_display = ('user', 'action', 'model_name', 'timestamp')
    search_fields = ('user__username', 'model_name')
    list_filter = ('action', 'timestamp')

# Notification Admin
class NotificationAdmin(admin.ModelAdmin):
    list_display = ('user', 'title', 'is_read', 'created_at')
    search_fields = ('user__username', 'title')
    list_filter = ('is_read', 'created_at')

# Register Models
admin.site.register(User, CustomUserAdmin)
admin.site.register(CustomPermission, CustomPermissionAdmin)
admin.site.register(Employee, EmployeeAdmin)
admin.site.register(Service, ServiceAdmin)
admin.site.register(Contract, ContractAdmin)
admin.site.register(Leave, LeaveAdmin)
admin.site.register(LeaveBalance)
admin.site.register(Attendance)
admin.site.register(Salary, SalaryAdmin)
admin.site.register(SalaryAdvance)
admin.site.register(Evaluation, EvaluationAdmin)
admin.site.register(Training, TrainingAdmin)
admin.site.register(Skill, SkillAdmin)
admin.site.register(EmployeeSkill, EmployeeSkillAdmin)
admin.site.register(JobPosting, JobPostingAdmin)
admin.site.register(JobApplication, JobApplicationAdmin)
admin.site.register(Favorite, FavoriteAdmin)
admin.site.register(Document, DocumentAdmin)
admin.site.register(AuditLog, AuditLogAdmin)
admin.site.register(Notification, NotificationAdmin)



#core/forms.py

from django import forms
from django.core.exceptions import ValidationError
from django.contrib.auth.hashers import make_password
from .models import (
    User, CustomPermission, Employee, Service, Contract, Leave, LeaveBalance,
    Attendance, Salary, SalaryAdvance, Evaluation, Training, Skill, EmployeeSkill,
    JobPosting, JobApplication, Favorite, Document, Notification
)

# User Form
class UserForm(forms.ModelForm):
    password = forms.CharField(widget=forms.PasswordInput())

    class Meta:
        model = User
        fields = ['username', 'email', 'password', 'is_hr', 'is_manager', 'is_employee']

    def save(self, commit=True):
        user = super().save(commit=False)
        user.password = make_password(self.cleaned_data['password'])  # Hasher le mot de passe
        if commit:
            user.save()
        return user

# Custom Permission Form
class CustomPermissionForm(forms.ModelForm):
    class Meta:
        model = CustomPermission
        fields = '__all__'

# Employee Form
class EmployeeForm(forms.ModelForm):
    class Meta:
        model = Employee
        fields = '__all__'
        widgets = {
            'birth_date': forms.DateInput(attrs={'type': 'date'}),
            'hire_date': forms.DateInput(attrs={'type': 'date'}),
        }

# Service Form
class ServiceForm(forms.ModelForm):
    class Meta:
        model = Service
        fields = '__all__'

# Contract Form
class ContractForm(forms.ModelForm):
    class Meta:
        model = Contract
        fields = '__all__'
        widgets = {
            'start_date': forms.DateInput(attrs={'type': 'date'}),
            'end_date': forms.DateInput(attrs={'type': 'date'}),
        }

# Leave Form
class LeaveForm(forms.ModelForm):
    class Meta:
        model = Leave
        fields = '__all__'
        widgets = {
            'start_date': forms.DateInput(attrs={'type': 'date'}),
            'end_date': forms.DateInput(attrs={'type': 'date'}),
        }

    def clean(self):
        cleaned_data = super().clean()
        start_date = cleaned_data.get('start_date')
        end_date = cleaned_data.get('end_date')

        if start_date and end_date and end_date < start_date:
            raise ValidationError("La date de fin doit être postérieure à la date de début.")
        return cleaned_data

# LeaveBalance Form
class LeaveBalanceForm(forms.ModelForm):
    class Meta:
        model = LeaveBalance
        fields = '__all__'

# Attendance Form
class AttendanceForm(forms.ModelForm):
    class Meta:
        model = Attendance
        fields = '__all__'
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date'}),
        }

# Salary Form
class SalaryForm(forms.ModelForm):
    class Meta:
        model = Salary
        fields = '__all__'

# SalaryAdvance Form
class SalaryAdvanceForm(forms.ModelForm):
    class Meta:
        model = SalaryAdvance
        fields = '__all__'
        widgets = {
            'reason': forms.Textarea(attrs={'rows': 3}),
        }

# Evaluation Form
class EvaluationForm(forms.ModelForm):
    class Meta:
        model = Evaluation
        fields = '__all__'
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date'}),
            'comments': forms.Textarea(attrs={'rows': 3}),
        }

# Training Form
class TrainingForm(forms.ModelForm):
    class Meta:
        model = Training
        fields = '__all__'
        widgets = {
            'start_date': forms.DateInput(attrs={'type': 'date'}),
            'end_date': forms.DateInput(attrs={'type': 'date'}),
            'description': forms.Textarea(attrs={'rows': 3}),
        }

# Skill Form
class SkillForm(forms.ModelForm):
    class Meta:
        model = Skill
        fields = '__all__'
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }

# EmployeeSkill Form
class EmployeeSkillForm(forms.ModelForm):
    class Meta:
        model = EmployeeSkill
        fields = '__all__'
        widgets = {
            'acquired_date': forms.DateInput(attrs={'type': 'date'}),
        }

# JobPosting Form
class JobPostingForm(forms.ModelForm):
    class Meta:
        model = JobPosting
        fields = '__all__'
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }

# JobApplication Form
class JobApplicationForm(forms.ModelForm):
    class Meta:
        model = JobApplication
        fields = '__all__'
        widgets = {
            'cover_letter': forms.Textarea(attrs={'rows': 3}),
            'interview_date': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
        }

# Favorite Form
class FavoriteForm(forms.ModelForm):
    class Meta:
        model = Favorite
        fields = '__all__'

# Document Form
class DocumentForm(forms.ModelForm):
    class Meta:
        model = Document
        fields = '__all__'

# Notification Form
class NotificationForm(forms.ModelForm):
    class Meta:
        model = Notification
        fields = '__all__'
        widgets = {
            'message': forms.Textarea(attrs={'rows': 3}),
        }
		
		

#core/models.py
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import MinValueValidator, MaxValueValidator
from django.contrib.auth import get_user_model
import os

# Custom User Model
class User(AbstractUser):
    email = models.EmailField(unique=True)
    is_hr = models.BooleanField(default=False)
    is_manager = models.BooleanField(default=False)
    is_employee = models.BooleanField(default=True)

    def __str__(self):
        return self.username

# Document Model
class Document(models.Model):
    title = models.CharField(max_length=255)
    file = models.FileField(upload_to='documents/%Y/%m/%d/')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def filename(self):
        return os.path.basename(self.file.name)

    def __str__(self):
        return self.title

# Custom Permission Model
class CustomPermission(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="Utilisateur")
    can_manage_employees = models.BooleanField(default=False, verbose_name="Peut gérer les employés")
    can_manage_contracts = models.BooleanField(default=False, verbose_name="Peut gérer les contrats")
    can_manage_leaves = models.BooleanField(default=False, verbose_name="Peut gérer les congés")
    can_manage_salaries = models.BooleanField(default=False, verbose_name="Peut gérer les salaires")
    can_manage_recruitment = models.BooleanField(default=False, verbose_name="Peut gérer le recrutement")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Créé le")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Mis à jour le")

    def __str__(self):
        return f"Permissions pour {self.user.username}"

# Service Model
class Service(models.Model):
    code = models.CharField(max_length=10, unique=True)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.code

# Employee Model
class Employee(models.Model):
    GENDER_CHOICES = [
        ('M', 'Masculin'),
        ('F', 'Féminin'),
        ('O', 'Autre')
    ]
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES, null=True, blank=True)
    user = models.OneToOneField(User, on_delete=models.CASCADE, verbose_name="Utilisateur associé")
    nom = models.CharField(max_length=255, verbose_name="Nom", default="Nom par défaut")
    prenom = models.CharField(max_length=255, verbose_name="Prénom", default="Prénom par défaut")
    code = models.CharField(max_length=10, unique=True, verbose_name="Code employé")
    birth_date = models.DateField(verbose_name="Date de naissance")
    hire_date = models.DateField(verbose_name="Date d'embauche")
    address = models.TextField(verbose_name="Adresse")
    phone = models.CharField(max_length=20, null=True, blank=True)
    documents = models.ManyToManyField(Document)
    service = models.ForeignKey(Service, on_delete=models.PROTECT, verbose_name="Service")
    base_salary = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="Salaire de base")
    daily_salary = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="Salaire journalier")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Créé le")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Mis à jour le")

    def __str__(self):
        return f"{self.prenom} {self.nom} - {self.code}"

# Contract Model
class Contract(models.Model):
    CONTRACT_TYPES = [
        ('CDI', 'Contrat à Durée Indéterminée'),
        ('CDD', 'Contrat à Durée Déterminée'),
        ('STAGE', 'Stage'),
    ]
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    type = models.CharField(max_length=5, choices=CONTRACT_TYPES)
    start_date = models.DateField()
    end_date = models.DateField(null=True, blank=True)
    monthly_salary = models.DecimalField(max_digits=10, decimal_places=2)
    daily_salary = models.DecimalField(max_digits=10, decimal_places=2)
    is_active = models.BooleanField(default=True)
    archived = models.BooleanField(default=False)
    document = models.ForeignKey(Document, on_delete=models.SET_NULL, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.employee} - {self.type}"

# Leave Model
class Leave(models.Model):
    LEAVE_TYPES = [
        ('ANNUAL', 'Congé Annuel'),
        ('SICK', 'Congé Maladie'),
        ('MATERNITY', 'Congé Maternité'),
        ('PATERNITY', 'Congé Paternité'),
        ('UNPAID', 'Congé Sans Solde'),
    ]
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    type = models.CharField(max_length=10, choices=LEAVE_TYPES)
    start_date = models.DateField()
    end_date = models.DateField()
    status = models.CharField(max_length=10, default='PENDING')
    approved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.employee} - {self.type}"

# LeaveBalance Model
class LeaveBalance(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    year = models.IntegerField()
    annual_leave_balance = models.IntegerField(default=30)
    sick_leave_balance = models.IntegerField(default=15)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.employee} - {self.year}"

# Attendance Model
class Attendance(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    date = models.DateField()
    is_present = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['employee', 'date']

    def __str__(self):
        return f"{self.employee} - {self.date}"

# Salary Model
class Salary(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    month = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(12)])
    year = models.IntegerField()
    base_salary = models.DecimalField(max_digits=10, decimal_places=2)
    absences_deduction = models.DecimalField(max_digits=10, decimal_places=2)
    bonuses = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    net_salary = models.DecimalField(max_digits=10, decimal_places=2)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['employee', 'month', 'year']

    def __str__(self):
        return f"{self.employee} - {self.month}/{self.year}"

# SalaryAdvance Model
class SalaryAdvance(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    reason = models.TextField()
    year = models.IntegerField()
    approved = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    request_date = models.DateField(auto_now_add=True)

    class Meta:
        constraints = [
            models.UniqueConstraint(
                fields=['employee', 'year'],
                condition=models.Q(approved=True),
                name='max_two_advances_per_year'
            )
        ]

    def __str__(self):
        return f"{self.employee} - {self.amount}"

# Evaluation Model
class Evaluation(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    evaluator = models.ForeignKey(User, on_delete=models.PROTECT)
    date = models.DateField()
    performance_score = models.IntegerField(validators=[MinValueValidator(0), MaxValueValidator(100)])
    comments = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.employee} - {self.performance_score}"

# Training Model
class Training(models.Model):
    TRAINING_STATUS = [
        ('PLANNED', 'Planifiée'),
        ('IN_PROGRESS', 'En cours'),
        ('COMPLETED', 'Terminée'),
        ('CANCELLED', 'Annulée')
    ]
    employee = models.ForeignKey(Employee, on_delete=models.PROTECT)
    title = models.CharField(max_length=100)
    description = models.TextField()
    start_date = models.DateField()
    end_date = models.DateField()
    status = models.CharField(max_length=20, choices=TRAINING_STATUS)
    score = models.IntegerField(null=True, blank=True)
    certificate = models.FileField(upload_to='certificates/', null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.employee} - {self.title}"

# Skill Model
class Skill(models.Model):
    name = models.CharField(max_length=100)
    category = models.CharField(max_length=50)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name

# EmployeeSkill Model
class EmployeeSkill(models.Model):
    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)
    skill = models.ForeignKey(Skill, on_delete=models.CASCADE)
    level = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    acquired_date = models.DateField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ['employee', 'skill']

    def __str__(self):
        return f"{self.employee} - {self.skill}"

# JobPosting Model
class JobPosting(models.Model):
    title = models.CharField(max_length=100)
    description = models.TextField()
    contract_type = models.CharField(max_length=5, choices=Contract.CONTRACT_TYPES)
    service = models.ForeignKey(Service, on_delete=models.PROTECT)
    active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

# JobApplication Model
class JobApplication(models.Model):
    STATUS_CHOICES = [
        ('RECEIVED', 'Reçue'),
        ('PROCESSING', 'En cours de traitement'),
        ('INTERVIEW', 'Entretien planifié'),
        ('REJECTED', 'Rejetée'),
        ('ACCEPTED', 'Acceptée'),
    ]
    job_posting = models.ForeignKey(JobPosting, on_delete=models.PROTECT)
    candidate = models.ForeignKey(User, on_delete=models.PROTECT)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='RECEIVED')
    cv_file = models.FileField(upload_to='cvs/')
    cover_letter = models.TextField()
    interview_date = models.DateTimeField(null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.candidate} - {self.job_posting}"

# Favorite Model
class Favorite(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=50)
    url = models.CharField(max_length=200)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.user} - {self.name}"

# AuditLog Model
class AuditLog(models.Model):
    ACTION_CHOICES = [
        ('CREATE', 'Création'),
        ('UPDATE', 'Modification'),
        ('DELETE', 'Suppression'),
    ]
    user = models.ForeignKey(User, on_delete=models.PROTECT)
    action = models.CharField(max_length=10, choices=ACTION_CHOICES)
    model_name = models.CharField(max_length=100)
    object_id = models.IntegerField()
    changes = models.JSONField()
    timestamp = models.DateTimeField(auto_now_add=True)
    ip_address = models.GenericIPAddressField()

    def __str__(self):
        return f"{self.user} - {self.action}"

# Notification Model
class Notification(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user} - {self.title}"



#core/permissions.py
from rest_framework.permissions import BasePermission
from .models import CustomPermission
from django.contrib.auth import get_user_model

User = get_user_model()

# Base Permission Classes
class IsHR(BasePermission):
    def has_permission(self, request, view):
        return request.user and request.user.is_authenticated and request.user.is_hr

class IsManager(BasePermission):
    def has_permission(self, request, view):
        return request.user and request.user.is_authenticated and request.user.is_manager

class IsEmployee(BasePermission):
    def has_permission(self, request, view):
        return request.user and request.user.is_authenticated and request.user.is_employee

class IsOwnerOrHR(BasePermission):
    def has_object_permission(self, request, view, obj):
        # HR can access all records
        if request.user.is_hr:
            return True
        # Employees can only access their own records
        return hasattr(obj, 'employee') and obj.employee.user == request.user

# Custom Permission Base Class
class CustomPermissionBase(BasePermission):
    def __init__(self, permission_attribute):
        self.permission_attribute = permission_attribute

    def has_permission(self, request, view):
        if request.user.is_hr or request.user.is_manager:
            return True
        custom_permission = CustomPermission.objects.filter(user=request.user).first()
        if custom_permission:
            return getattr(custom_permission, self.permission_attribute, False)
        return False

# Specific Custom Permissions
class CanManageEmployees(CustomPermissionBase):
    def __init__(self):
        super().__init__('can_manage_employees')

class CanManageContracts(CustomPermissionBase):
    def __init__(self):
        super().__init__('can_manage_contracts')

class CanManageLeaves(CustomPermissionBase):
    def __init__(self):
        super().__init__('can_manage_leaves')

class CanManageSalaries(CustomPermissionBase):
    def __init__(self):
        super().__init__('can_manage_salaries')

class CanManageRecruitment(CustomPermissionBase):
    def __init__(self):
        super().__init__('can_manage_recruitment')

# Combined Permissions
class CanManageContractsOrSelf(BasePermission):
    def has_permission(self, request, view):
        return CanManageContracts().has_permission(request, view) or IsEmployee().has_permission(request, view)

    def has_object_permission(self, request, view, obj):
        return CanManageContracts().has_object_permission(request, view, obj) or IsEmployee().has_object_permission(request, view, obj)

class CanManageRecruitmentOrSelf(BasePermission):
    def has_permission(self, request, view):
        return CanManageRecruitment().has_permission(request, view) or IsEmployee().has_permission(request, view)

    def has_object_permission(self, request, view, obj):
        return CanManageRecruitment().has_object_permission(request, view, obj) or IsEmployee().has_object_permission(request, view, obj)

# Salary Access Permission
class SalaryAccessPermission(BasePermission):
    def has_permission(self, request, view):
        return CanManageSalaries().has_permission(request, view) or IsEmployee().has_permission(request, view)

    def has_object_permission(self, request, view, obj):
        return CanManageSalaries().has_object_permission(request, view, obj) or IsEmployee().has_object_permission(request, view, obj)

# Employee Self Access
class EmployeeSelfAccess(BasePermission):
    def has_permission(self, request, view):
        return IsEmployee().has_permission(request, view)

    def has_object_permission(self, request, view, obj):
        return hasattr(obj, 'employee') and obj.employee.user == request.user




#core/serializers.py
from rest_framework import serializers
from .models import (
    User, CustomPermission, Employee, Service, Contract, Leave, LeaveBalance,
    Attendance, Salary, SalaryAdvance, Evaluation, Training, Skill, EmployeeSkill,
    JobPosting, JobApplication, Favorite, Document, Notification
)

# User Serializer
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'is_hr', 'is_manager', 'is_employee']
        extra_kwargs = {'password': {'write_only': True}}

    def create(self, validated_data):
        user = User.objects.create_user(**validated_data)
        return user

# Custom Permission Serializer
class CustomPermissionSerializer(serializers.ModelSerializer):
    class Meta:
        model = CustomPermission
        fields = [
            'user', 'can_manage_employees', 'can_manage_contracts', 'can_manage_leaves',
            'can_manage_salaries', 'can_manage_recruitment'
        ]

# Service Serializer
class ServiceSerializer(serializers.ModelSerializer):
    class Meta:
        model = Service
        fields = ['id', 'code', 'description']

# Employee Serializer
class EmployeeSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    service = ServiceSerializer(read_only=True)

    class Meta:
        model = Employee
        fields = [
            'id', 'user', 'nom', 'prenom', 'code', 'gender', 'birth_date', 'hire_date',
            'address', 'phone', 'service', 'base_salary', 'daily_salary'
        ]

# Contract Serializer
class ContractSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = Contract
        fields = [
            'id', 'employee', 'type', 'start_date', 'end_date', 'monthly_salary',
            'daily_salary', 'is_active', 'archived', 'document'
        ]

# Leave Serializer
class LeaveSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = Leave
        fields = [
            'id', 'employee', 'type', 'start_date', 'end_date', 'status', 'approved'
        ]

# LeaveBalance Serializer
class LeaveBalanceSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = LeaveBalance
        fields = ['id', 'employee', 'year', 'annual_leave_balance', 'sick_leave_balance']

# Attendance Serializer
class AttendanceSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = Attendance
        fields = ['id', 'employee', 'date', 'is_present']

# Salary Serializer
class SalarySerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = Salary
        fields = [
            'id', 'employee', 'month', 'year', 'base_salary', 'absences_deduction',
            'bonuses', 'net_salary'
        ]

# SalaryAdvance Serializer
class SalaryAdvanceSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = SalaryAdvance
        fields = ['id', 'employee', 'amount', 'reason', 'year', 'approved']

# Evaluation Serializer
class EvaluationSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)
    evaluator = UserSerializer(read_only=True)

    class Meta:
        model = Evaluation
        fields = [
            'id', 'employee', 'evaluator', 'date', 'performance_score', 'comments'
        ]

# Training Serializer
class TrainingSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)

    class Meta:
        model = Training
        fields = [
            'id', 'employee', 'title', 'description', 'start_date', 'end_date',
            'status', 'score', 'certificate'
        ]

# Skill Serializer
class SkillSerializer(serializers.ModelSerializer):
    class Meta:
        model = Skill
        fields = ['id', 'name', 'category', 'description']

# EmployeeSkill Serializer
class EmployeeSkillSerializer(serializers.ModelSerializer):
    employee = EmployeeSerializer(read_only=True)
    skill = SkillSerializer(read_only=True)

    class Meta:
        model = EmployeeSkill
        fields = ['id', 'employee', 'skill', 'level', 'acquired_date']

# JobPosting Serializer
class JobPostingSerializer(serializers.ModelSerializer):
    service = ServiceSerializer(read_only=True)

    class Meta:
        model = JobPosting
        fields = ['id', 'title', 'description', 'contract_type', 'service', 'active']

# JobApplication Serializer
class JobApplicationSerializer(serializers.ModelSerializer):
    job_posting = JobPostingSerializer(read_only=True)
    candidate = UserSerializer(read_only=True)

    class Meta:
        model = JobApplication
        fields = [
            'id', 'job_posting', 'candidate', 'status', 'cv_file', 'cover_letter',
            'interview_date'
        ]

# Favorite Serializer
class FavoriteSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)

    class Meta:
        model = Favorite
        fields = ['id', 'user', 'name', 'url']

# Document Serializer
class DocumentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Document
        fields = ['id', 'title', 'file']

# Notification Serializer
class NotificationSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)

    class Meta:
        model = Notification
        fields = ['id', 'user', 'title', 'message', 'is_read']



#core/services.py
from decimal import Decimal
from core import models  
from .models import Attendance, AuditLog, Notification, SalaryAdvance
from django.core.mail import send_mail
from django.conf import settings


class SalaryCalculator:
    @staticmethod
    def calculate_monthly_salary(employee, month, year):
        # Get base salary and daily rate
        base_salary = employee.base_salary
        daily_rate = employee.daily_salary
        
        # Get all absences for the month
        absences = Attendance.objects.filter(
            employee=employee,
            date__month=month,
            date__year=year,
            is_present=False
        ).count()
        
        # Calculate absence deductions
        absence_deduction = Decimal(absences) * daily_rate
        
        # Get approved advances for the month
        advances = SalaryAdvance.objects.filter(
            employee=employee,
            request_date__month=month,
            request_date__year=year,
            approved=True
        ).aggregate(total=models.Sum('amount'))['total'] or 0
        
        # Calculate net salary
        net_salary = base_salary - absence_deduction - advances
        
        return {
            'base_salary': base_salary,
            'absences': absences,
            'absence_deduction': absence_deduction,
            'advances': advances,
            'net_salary': net_salary
        }

class NotificationService:
    @staticmethod
    def notify_users(users, title, message):
        for user in users:
            Notification.objects.create(
                user=user,
                title=title,
                message=message
            )
            
            if user.email:
                send_mail(
                    title,
                    message,
                    settings.DEFAULT_FROM_EMAIL,
                    [user.email],
                    fail_silently=True
                )

class AuditService:
    @staticmethod
    def log_action(user, action, model_name, object_id, changes, request):
        AuditLog.objects.create(
            user=user,
            action=action,
            model_name=model_name,
            object_id=object_id,
            changes=changes,
            ip_address=request.META.get('REMOTE_ADDR')
        )


#core/urls.py
from django.urls import path, include
from django.views.generic import RedirectView
from rest_framework.routers import DefaultRouter
from .views import (
    ServiceViewSet, EmployeeViewSet, ContractViewSet,
    LeaveViewSet, SalaryViewSet, EvaluationViewSet,
    JobPostingViewSet, JobApplicationViewSet, FavoriteViewSet,
    DashboardViewSet, TrainingViewSet, EmployeeSkillViewSet, SkillViewSet
)
from .views_ui import (
    DashboardView, EmployeesView, ContractsView, 
    LeavesView, SalariesView, EvaluationsView,
    EvaluationReportsView, RecruitmentView, FavoritesView
)
from .views import (
    add_employee, add_evaluation, manage_dashboard,
    manage_employees, manage_evaluations, manage_leaves,
    manage_salaries, manage_contracts, manage_recruitment,
    manage_favorites, grant_permissions
)

# Configuration du router pour l'API
router = DefaultRouter()
router.register(r'services', ServiceViewSet)
router.register(r'employees', EmployeeViewSet)
router.register(r'contracts', ContractViewSet)
router.register(r'leaves', LeaveViewSet)
router.register(r'salaries', SalaryViewSet)
router.register(r'evaluations', EvaluationViewSet)
router.register(r'job-postings', JobPostingViewSet)
router.register(r'job-applications', JobApplicationViewSet)
router.register(r'favorites', FavoriteViewSet, basename='favorite')
router.register(r'dashboard', DashboardViewSet, basename='dashboard')
router.register(r'trainings', TrainingViewSet)
router.register(r'skills', SkillViewSet)
router.register(r'employee-skills', EmployeeSkillViewSet)

urlpatterns = [
    # Routes pour l'interface utilisateur
    path('', RedirectView.as_view(pattern_name='manage_dashboard'), name='home'),
    path('dashboard/', DashboardView.as_view(), name='manage_dashboard'),
    path('employees/', EmployeesView.as_view(), name='manage_employees'),
    path('contracts/', ContractsView.as_view(), name='manage_contracts'),
    path('leaves/', LeavesView.as_view(), name='manage_leaves'),
    path('salaries/', SalariesView.as_view(), name='manage_salaries'),
    path('evaluations/', EvaluationsView.as_view(), name='manage_evaluations'),
    path('evaluation-reports/', EvaluationReportsView.as_view(), name='manage_evaluation_reports'),
    path('recruitment/', RecruitmentView.as_view(), name='manage_recruitment'),
    path('favorites/', FavoritesView.as_view(), name='manage_favorites'),
    path('grant-permissions/', grant_permissions, name='grant_permissions'),

    # Routes pour les vues fonctionnelles
    path('add-employee/', add_employee, name='add_employee'),
    path('add-evaluation/', add_evaluation, name='add_evaluation'),
    path('manage-dashboard/', manage_dashboard, name='manage_dashboard'),
    path('manage-employees/', manage_employees, name='manage_employees'),
    path('manage-evaluations/', manage_evaluations, name='manage_evaluations'),
    path('manage-leaves/', manage_leaves, name='manage_leaves'),
    path('manage-salaries/', manage_salaries, name='manage_salaries'),
    path('manage-contracts/', manage_contracts, name='manage_contracts'),
    path('manage-recruitment/', manage_recruitment, name='manage_recruitment'),
    path('manage-favorites/', manage_favorites, name='manage_favorites'),

    # Routes pour l'API
    path('api/', include(router.urls)),
]


#core/validators.py
from django.core.exceptions import ValidationError
from datetime import date
import re

def validate_future_date(value):
    if value < date.today():
        raise ValidationError('La date ne peut pas être dans le passé.')

def validate_phone_number(value):
    pattern = r'^\+?1?\d{9,15}$'
    if not re.match(pattern, value):
        raise ValidationError('Numéro de téléphone invalide.')

def validate_file_size(value):
    filesize = value.size
    if filesize > 10485760:  # 10MB
        raise ValidationError("La taille maximale du fichier est de 10MB")


#core/views_ui.py
from django.shortcuts import render
from django.views.generic import TemplateView

class DashboardView(TemplateView):
    template_name = 'dashboard.html'

class EmployeesView(TemplateView):
    template_name = 'employees.html'

class ContractsView(TemplateView):
    template_name = 'contracts.html'

class LeavesView(TemplateView):
    template_name = 'leaves.html'

class SalariesView(TemplateView):
    template_name = 'salaries.html'

class EvaluationsView(TemplateView):
    template_name = 'evaluations.html'

class EvaluationReportsView(TemplateView):
    template_name = 'evaluation_reports.html'

class RecruitmentView(TemplateView):
    template_name = 'recruitment.html'

class FavoritesView(TemplateView):
    template_name = 'favorites.html'


#core/views.py
from datetime import date, datetime, timedelta
from rest_framework import serializers
from decimal import Decimal
from itertools import count
from django.shortcuts import get_object_or_404, render, redirect
from django.contrib.auth import authenticate, login
from django.contrib.auth.decorators import login_required
from rest_framework import viewsets, status
from rest_framework.decorators import action
from rest_framework.response import Response
from django.db.models.functions import ExtractMonth, ExtractYear
from django.db.models import Avg, Count, Q, Sum
from rest_framework import filters
from django_filters.rest_framework import DjangoFilterBackend
from .permissions import (
    CanManageEmployees, CanManageLeaves, CanManageSalaries,
    CanManageRecruitment, CanManageContractsOrSelf, SalaryAccessPermission,
    EmployeeSelfAccess
)
from .serializers import (
    EmployeeSerializer, ContractSerializer, LeaveSerializer,
    SalarySerializer, EvaluationSerializer, JobPostingSerializer,
    JobApplicationSerializer, FavoriteSerializer, TrainingSerializer,
    SkillSerializer, EmployeeSkillSerializer, ServiceSerializer
)
from .models import (
    Attendance, Employee, Contract, Leave, LeaveBalance, Salary, Evaluation, JobPosting,
    JobApplication, Favorite, Training, Skill, EmployeeSkill, Service
)
from .forms import CustomPermissionForm, EmployeeForm, EvaluationForm

# Login view
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('manage_dashboard')  # Redirect to dashboard after login
        else:
            return render(request, 'login.html', {'error': 'Invalid username or password'})
    return render(request, 'login.html')

# EmployeeViewSet
class EmployeeViewSet(viewsets.ModelViewSet):
    queryset = Employee.objects.all()
    serializer_class = EmployeeSerializer
    permission_classes = [CanManageEmployees]
    filter_backends = [DjangoFilterBackend, filters.SearchFilter, filters.OrderingFilter]
    filterset_fields = ['service', 'gender']
    search_fields = ['nom', 'prenom', 'code']
    ordering_fields = ['hire_date', 'birth_date']

    @action(detail=True, methods=['get'])
    def leave_balance(self, request, pk=None):
        employee = self.get_object()
        balance = LeaveBalance.objects.filter(
            employee=employee,
            year=datetime.now().year
        ).first()
        return Response({
            'annual_leave': balance.annual_leave_balance if balance else 30,
            'sick_leave': balance.sick_leave_balance if balance else 15
        })

    @action(detail=True, methods=['get'])
    def employee_details(self, request, pk=None):
        employee = self.get_object()
        evaluations = Evaluation.objects.filter(employee=employee)
        trainings = Training.objects.filter(employee=employee)
        return Response({
            'employee': EmployeeSerializer(employee).data,
            'evaluations': EvaluationSerializer(evaluations, many=True).data,
            'trainings': TrainingSerializer(trainings, many=True).data
        })

    @action(detail=False, methods=['get'])
    def print_list(self, request):
        employees = self.get_queryset()
        # Generate PDF or Excel file for printing
        return Response({"message": "Print functionality to be implemented."})

    def perform_create(self, serializer):
        employee = serializer.save()
        # Notification logic if needed

    @action(detail=False, methods=['get'])
    def manage_employees(self, request):
        return render(request, 'employees.html')

# ContractViewSet
class ContractViewSet(viewsets.ModelViewSet):
    queryset = Contract.objects.filter(archived=False)
    serializer_class = ContractSerializer
    permission_classes = [CanManageContractsOrSelf]

    @action(detail=True, methods=['post'])
    def archive(self, request, pk=None):
        contract = self.get_object()
        contract.archived = True
        contract.save()
        return Response({'status': 'Contract archived'})

    @action(detail=False, methods=['get'])
    def filter_contracts(self, request):
        service = request.query_params.get('service')
        contract_type = request.query_params.get('type')
        start_date = request.query_params.get('start_date')
        end_date = request.query_params.get('end_date')
        contracts = Contract.objects.all()
        if service:
            contracts = contracts.filter(employee__service__code=service)
        if contract_type:
            contracts = contracts.filter(type=contract_type)
        if start_date and end_date:
            contracts = contracts.filter(start_date__gte=start_date, end_date__lte=end_date)
        return Response(ContractSerializer(contracts, many=True).data)

    def perform_update(self, serializer):
        contract = serializer.save()
        # Notification logic if needed

    @action(detail=False, methods=['get'])
    def manage_contracts(self, request):
        return render(request, 'contracts.html')

# LeaveViewSet
class LeaveViewSet(viewsets.ModelViewSet):
    queryset = Leave.objects.all()
    serializer_class = LeaveSerializer
    permission_classes = [CanManageLeaves]

    @action(detail=True, methods=['post'])
    def approve(self, request, pk=None):
        leave = self.get_object()
        leave.approved = True
        leave.status = 'APPROVED'
        leave.save()
        return Response({'status': 'Leave approved'})

    @action(detail=False, methods=['post'])
    def carry_over_annual_leave(self, request):
        year = request.data.get('year')
        employees = Employee.objects.all()
        for employee in employees:
            leave_balance = LeaveBalance.objects.filter(employee=employee, year=year).first()
            if leave_balance:
                leave_balance.annual_leave_balance += 30  # Annual leave carryover
                leave_balance.save()
        return Response({"message": "Annual leave carried over successfully."})

    @action(detail=False, methods=['get'])
    def manage_leaves(self, request):
        return render(request, 'leaves.html')

# SalaryViewSet
class SalaryViewSet(viewsets.ModelViewSet):
    queryset = Salary.objects.all()
    serializer_class = SalarySerializer
    permission_classes = [SalaryAccessPermission]

    def calculate_salary(self, employee, month, year):
        working_days = 22  # Average working days in a month
        absences = Attendance.objects.filter(
            employee=employee,
            date__month=month,
            date__year=year,
            is_present=False
        ).count()
        daily_salary = employee.daily_salary
        absences_deduction = absences * daily_salary
        net_salary = employee.base_salary - absences_deduction
        return {
            'base_salary': employee.base_salary,
            'absences_deduction': absences_deduction,
            'net_salary': net_salary
        }

    @action(detail=False, methods=['post'])
    def generate_monthly_salary(self, request):
        employee_id = request.data.get('employee_id')
        month = request.data.get('month')
        year = request.data.get('year')

        try:
            employee = Employee.objects.get(id=employee_id)
            salary_data = self.calculate_salary(employee, month, year)
            salary = Salary.objects.create(
                employee=employee,
                month=month,
                year=year,
                base_salary=salary_data['base_salary'],
                absences_deduction=salary_data['absences_deduction'],
                net_salary=salary_data['net_salary']
            )
            return Response(SalarySerializer(salary).data)
        except Employee.DoesNotExist:
            return Response({'error': 'Employee not found'}, status=status.HTTP_404_NOT_FOUND)

    @action(detail=False, methods=['post'])
    def add_bonus(self, request):
        employee_id = request.data.get('employee_id')
        amount = request.data.get('amount')
        employee = get_object_or_404(Employee, id=employee_id)
        employee.bonuses += Decimal(amount)
        employee.save()
        return Response({"message": "Bonus added successfully."})

    @action(detail=False, methods=['get'])
    def manage_salaries(self, request):
        return render(request, 'salaries.html')

# EvaluationViewSet
class EvaluationViewSet(viewsets.ModelViewSet):
    queryset = Evaluation.objects.all()
    serializer_class = EvaluationSerializer
    permission_classes = [CanManageEmployees]

    @action(detail=False, methods=['get'])
    def top_performers(self, request):
        top_evaluations = Evaluation.objects.values('employee').annotate(
            avg_score=Avg('performance_score')
        ).order_by('-avg_score')[:10]
        return Response(top_evaluations)

    @action(detail=False, methods=['get'])
    def generate_performance_report(self, request):
        evaluations = Evaluation.objects.all()
        report = {
            'average_score': evaluations.aggregate(avg_score=Avg('performance_score'))['avg_score'],
            'top_performers': evaluations.order_by('-performance_score')[:10]
        }
        return Response(report)

    @action(detail=False, methods=['get'])
    def manage_evaluations(self, request):
        return render(request, 'evaluations.html')

    @action(detail=False, methods=['get'])
    def manage_evaluation_reports(self, request):
        return render(request, 'evaluation_reports.html')

# JobPostingViewSet
class JobPostingViewSet(viewsets.ModelViewSet):
    queryset = JobPosting.objects.filter(active=True)
    serializer_class = JobPostingSerializer
    permission_classes = [CanManageRecruitment]

    @action(detail=False, methods=['get'])
    def statistics(self, request):
        total_postings = self.queryset.count()
        postings_by_type = self.queryset.values('contract_type').annotate(
            count=Count('id')
        )
        return Response({
            'total_postings': total_postings,
            'by_type': postings_by_type
        })

    @action(detail=False, methods=['get'])
    def manage_recruitment(self, request):
        return render(request, 'recruitment.html')

# JobApplicationViewSet
class JobApplicationViewSet(viewsets.ModelViewSet):
    queryset = JobApplication.objects.all()
    serializer_class = JobApplicationSerializer
    permission_classes = [CanManageRecruitment | EmployeeSelfAccess]

    @action(detail=True, methods=['post'])
    def update_status(self, request, pk=None):
        application = self.get_object()
        new_status = request.data.get('status')

        if new_status in dict(JobApplication.STATUS_CHOICES):
            application.status = new_status
            application.save()
            return Response({'status': 'Application status updated'})
        return Response({'error': 'Invalid status'}, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=True, methods=['post'])
    def schedule_interview(self, request, pk=None):
        application = self.get_object()
        interview_date = request.data.get('interview_date')
        application.interview_date = interview_date
        application.save()
        return Response({"message": "Interview scheduled successfully."})

# FavoriteViewSet
class FavoriteViewSet(viewsets.ModelViewSet):
    serializer_class = FavoriteSerializer
    permission_classes = [EmployeeSelfAccess]

    def get_queryset(self):
        return Favorite.objects.filter(user=self.request.user)

    @action(detail=False, methods=['get'])
    def get_favorites(self, request):
        favorites = self.get_queryset()
        favorite_data = []
        for favorite in favorites:
            favorite_data.append({
                'name': favorite.name,
                'url': favorite.url,
                'created_at': favorite.created_at
            })
        return Response(favorite_data)

    def perform_create(self, serializer):
        name = serializer.validated_data.get('name')
        url = serializer.validated_data.get('url')

        if Favorite.objects.filter(user=self.request.user, name=name, url=url).exists():
            raise serializers.ValidationError("This favorite already exists.")
        serializer.save(user=self.request.user)

    @action(detail=True, methods=['post'])
    def remove(self, request, pk=None):
        favorite = get_object_or_404(Favorite, pk=pk, user=request.user)
        favorite.delete()
        return Response({"detail": "Favorite removed successfully."}, status=status.HTTP_204_NO_CONTENT)

    @action(detail=False, methods=['post'])
    def add(self, request):
        name = request.data.get('name')
        url = request.data.get('url')

        if not name or not url:
            return Response({"error": "Name and URL are required."}, status=status.HTTP_400_BAD_REQUEST)

        if Favorite.objects.filter(user=request.user, name=name, url=url).exists():
            return Response({"error": "This favorite already exists."}, status=status.HTTP_400_BAD_REQUEST)

        Favorite.objects.create(user=request.user, name=name, url=url)
        return Response({"detail": "Favorite added successfully."}, status=status.HTTP_201_CREATED)

    @action(detail=False, methods=['get'])
    def manage_favorites(self, request):
        return render(request, 'favorites.html')

# TrainingViewSet
class TrainingViewSet(viewsets.ModelViewSet):
    queryset = Training.objects.all()
    serializer_class = TrainingSerializer
    permission_classes = [CanManageEmployees]

# SkillViewSet
class SkillViewSet(viewsets.ModelViewSet):
    queryset = Skill.objects.all()
    serializer_class = SkillSerializer
    permission_classes = [CanManageEmployees]

# EmployeeSkillViewSet
class EmployeeSkillViewSet(viewsets.ModelViewSet):
    queryset = EmployeeSkill.objects.all()
    serializer_class = EmployeeSkillSerializer
    permission_classes = [CanManageEmployees]

    def get_queryset(self):
        queryset = EmployeeSkill.objects.all()
        employee_id = self.request.query_params.get('employee', None)
        if employee_id:
            queryset = queryset.filter(employee_id=employee_id)
        return queryset

# ServiceViewSet
class ServiceViewSet(viewsets.ModelViewSet):
    queryset = Service.objects.all()
    serializer_class = ServiceSerializer
    permission_classes = [CanManageEmployees]

# Custom View for Granting Permissions
@login_required
def grant_permissions(request):
    if not request.user.is_manager:
        return redirect('home')

    if request.method == 'POST':
        form = CustomPermissionForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('manage_permissions')
    else:
        form = CustomPermissionForm()

    return render(request, 'grant_permissions.html', {'form': form})

# DashboardViewSet
class DashboardViewSet(viewsets.ViewSet):
    permission_classes = [CanManageEmployees]

    @action(detail=False, methods=['get'])
    def summary(self, request):
        """
        Provides a summary of key metrics for the dashboard.
        """
        total_employees = Employee.objects.count()
        active_contracts = Contract.objects.filter(is_active=True).count()
        pending_leaves = Leave.objects.filter(status='PENDING').count()
        total_salaries = Salary.objects.aggregate(total_salaries=Sum('net_salary'))['total_salaries'] or 0
        recent_evaluations = Evaluation.objects.filter(date__gte=date.today() - timedelta(days=30)).count()
        open_job_postings = JobPosting.objects.filter(active=True).count()

        return Response({
            'total_employees': total_employees,
            'active_contracts': active_contracts,
            'pending_leaves': pending_leaves,
            'total_salaries': total_salaries,
            'recent_evaluations': recent_evaluations,
            'open_job_postings': open_job_postings,
        })

    @action(detail=False, methods=['get'])
    def employee_statistics(self, request):
        """
        Provides statistics about employees, such as gender distribution and average salary.
        """
        gender_distribution = Employee.objects.values('gender').annotate(count=Count('id'))
        average_salary = Employee.objects.aggregate(average_salary=Avg('base_salary'))['average_salary'] or 0

        return Response({
            'gender_distribution': gender_distribution,
            'average_salary': average_salary,
        })

    @action(detail=False, methods=['get'])
    def leave_statistics(self, request):
        """
        Provides statistics about leaves, such as leave types and approval rates.
        """
        leave_types = Leave.objects.values('type').annotate(count=Count('id'))
        approved_leaves = Leave.objects.filter(approved=True).count()
        total_leaves = Leave.objects.count()
        approval_rate = (approved_leaves / total_leaves * 100) if total_leaves > 0 else 0

        return Response({
            'leave_types': leave_types,
            'approval_rate': approval_rate,
        })

    @action(detail=False, methods=['get'])
    def recruitment_statistics(self, request):
        """
        Provides statistics about job postings and applications.
        """
        job_postings_by_type = JobPosting.objects.values('contract_type').annotate(count=Count('id'))
        application_status = JobApplication.objects.values('status').annotate(count=Count('id'))

        return Response({
            'job_postings_by_type': job_postings_by_type,
            'application_status': application_status,
        })

    @action(detail=False, methods=['get'])
    def training_statistics(self, request):
        """
        Provides statistics about employee training.
        """
        training_status = Training.objects.values('status').annotate(count=Count('id'))
        average_training_score = Training.objects.aggregate(average_score=Avg('score'))['average_score'] or 0

        return Response({
            'training_status': training_status,
            'average_training_score': average_training_score,
        })

    @action(detail=False, methods=['get'])
    def manage_dashboard(self, request):
        """
        Renders the dashboard view for the UI.
        """
        return render(request, 'dashboard.html')

# Fonctions manquantes
def add_employee(request):
    if request.method == 'POST':
        form = EmployeeForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('manage_employees')
    else:
        form = EmployeeForm()
    return render(request, 'add_employee.html', {'form': form})

def add_evaluation(request):
    if request.method == 'POST':
        form = EvaluationForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('manage_evaluations')
    else:
        form = EvaluationForm()
    return render(request, 'add_evaluation.html', {'form': form})

def manage_dashboard(request):
    total_employees = Employee.objects.count()
    active_contracts = Contract.objects.filter(is_active=True).count()
    pending_leaves = Leave.objects.filter(status='PENDING').count()
    total_salaries = Salary.objects.aggregate(total_salaries=Sum('net_salary'))['total_salaries'] or 0
    recent_evaluations = Evaluation.objects.filter(date__gte=date.today() - timedelta(days=30)).count()
    open_job_postings = JobPosting.objects.filter(active=True).count()

    context = {
        'total_employees': total_employees,
        'active_contracts': active_contracts,
        'pending_leaves': pending_leaves,
        'total_salaries': total_salaries,
        'recent_evaluations': recent_evaluations,
        'open_job_postings': open_job_postings,
    }
    return render(request, 'dashboard.html', context)

def manage_employees(request):
    employees = Employee.objects.all()
    return render(request, 'manage_employees.html', {'employees': employees})

def manage_evaluations(request):
    evaluations = Evaluation.objects.all()
    return render(request, 'manage_evaluations.html', {'evaluations': evaluations})

def manage_leaves(request):
    leaves = Leave.objects.all()
    return render(request, 'manage_leaves.html', {'leaves': leaves})

def manage_salaries(request):
    salaries = Salary.objects.all()
    return render(request, 'manage_salaries.html', {'salaries': salaries})

def manage_contracts(request):
    contracts = Contract.objects.all()
    return render(request, 'manage_contracts.html', {'contracts': contracts})

def manage_recruitment(request):
    job_postings = JobPosting.objects.all()
    return render(request, 'manage_recruitment.html', {'job_postings': job_postings})

def manage_favorites(request):
    favorites = Favorite.objects.filter(user=request.user)
    return render(request, 'manage_favorites.html', {'favorites': favorites})



#projetRH/settings.py
from pathlib import Path
import os
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-e1zb4i*9y*m0x#&k&3$*xjiwcy(rvji!c0g0=2h34p(-xx9!yl'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',  # Pour l'authentification JWT
    'corsheaders',  # Pour gérer les CORS
    'drf_yasg',  # Pour la documentation Swagger
    'drf_spectacular',  # Pour la documentation OpenAPI
    'core',  # Votre application principale
]

# Configuration JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # Middleware pour CORS
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuration de REST Framework
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',  # Par défaut, tout le monde peut accéder aux API
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Authentification JWT
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',  # Pour la documentation OpenAPI
}

# Configuration de drf-spectacular (documentation OpenAPI)
SPECTACULAR_SETTINGS = {
    'TITLE': 'ProjetRH API',
    'DESCRIPTION': 'Documentation de l\'API du projetRH',
    'VERSION': '1.0.0',
}

# Configuration CORS
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # Autoriser les requêtes depuis ce domaine
]

# URL de connexion
LOGIN_URL = '/login/'  # Correspond au chemin de la vue 'login_view'

# Modèle d'utilisateur personnalisé
AUTH_USER_MODEL = 'core.User'

# Configuration des URLs
ROOT_URLCONF = 'projetRH.urls'

# Configuration des templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'core/templates')],  # Chemin vers les templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# Configuration de la base de données
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Validation des mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalisation
LANGUAGE_CODE = 'fr-fr'  # Langue par défaut
TIME_ZONE = 'UTC'  # Fuseau horaire
USE_I18N = True  # Activation de l'internationalisation
USE_TZ = True  # Utilisation des fuseaux horaires

# Fichiers statiques (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Clé primaire par défaut
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuration de l'application WSGI
WSGI_APPLICATION = 'projetRH.wsgi.application'


#projetRH\urls.py
"""
URL configuration for projetRH project.

The urlpatterns list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.1/topics/http/urls/
Examples:
Function views
    
Add an import:  from my_app import views
Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    
Add an import:  from other_app.views import Home
Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    
Import the include() function: from django.urls import include, path
Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
#projetRH\urls.py
from django.contrib import admin
from django.urls import path, include
from django.shortcuts import redirect
from rest_framework import permissions
from drf_yasg.views import get_schema_view
from drf_yasg import openapi
from core.views import login_view
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView  # Ajoutez cette ligne

schema_view = get_schema_view(
    openapi.Info(
        title="HR Management API",
        default_version='v1',
        description="API documentation for HR Management System",
    ),
    public=True,
    permission_classes=(permissions.IsAuthenticatedOrReadOnly,),
)

def redirect_to_login(request):
    return redirect('login')

urlpatterns = [
    path('', redirect_to_login, name='root'),  # Redirige vers la page de login
    path('admin/', admin.site.urls),
    path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='swagger'),
    path('api/', include('core.urls')),  # Les routes API sont sous /api/
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),  # Pour obtenir un jeton
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),  # Pour rafraîchir un jeton
    path('login/', login_view, name='login'),  # Page de connexion à part
]

	